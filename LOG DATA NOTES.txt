Virtual Machine Log Files
-------------------------
Connect to virtual machine as Docker user:
  minikube ssh --profile curity

View logs:
  cd /var/log/containers
  ls curity-idsvr-runtime

Understand naming convention:
  curity-idsvr-runtime-558d9d648d-9bzd7_default_idsvr-runtime-59a6e3876c502f9b969822939783693ef2fa85915ccbc5eef8a85a8f72a1e8cd.log
  curity-idsvr-runtime-558d9d648d-9bzd7_default_idsvr-runtime-643818f0c03d5918c95650ff08643a45824edb4bfaebca67031e3e170bc966c5.log
  curity-idsvr-runtime-558d9d648d-crkpl_default_idsvr-runtime-b4505d37aae66a4aadf0228b9d7ca70acd2709b24f18bc7cb6022f058c0fd374.log
  curity-idsvr-runtime-558d9d648d-crkpl_default_idsvr-runtime-d3db1f82ecae3d4765c5b23ef6cc4fbf4ff13b2413575688ea48aeed5fad509c.log

To tail logs we need to switch from the default 'docker' user to one with permissions:
  su

Each log by default has 3 fields in a JSON bare format:
  log
  stream
  time

{
"log":"2021-11-08T09:05:39:618+0000 INFO    {app-server-RuntimeServerLifecycleManager} org.eclipse.jetty.util.ssl.SslContextFactory - No Cipher Suite matching 'TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA' is supported\n",
"stream":"stdout",
"time":"2021-11-08T09:05:39.619158966Z"
}

So next objective may be to split logs into a format where there are more fields???

Container Log Files
-------------------
Under var/log these files existed and I would like to ship the request log:

  0      alarms.log
  2219   audit.log
  6394   cluster.log
  0      confsvc-audit.log
  8      confsvc-error.log.1
  18     confsvc-error.log.idx
  13     confsvc-error.log.siz
  23707  confsvc-internal.log
  5528   confsvc.log
  804913 gc.log
  0      post-commit-scripts.log
  860    request.log

Logging Fields
--------------
From the main logging docs at https://curity.io/docs/idsvr/latest/system-admin-guide/logging/index.html.

Server log has these fields:

  The date and time
  Log level
  Request ID
  Session ID
  Thread ID
  Logger name
  Log message
  LongSessionId is also possible

Request log has these fields:

  date
  request-id
  client
  method
  uri
  params
  protocol
  lang
  accept
  status
  size
  content-type
  secure
  request-headers
  response-headers
  duration
  location

Log4j2
------
Loggers:

  Root logger
  se.curity for request logs?
  io.curity for plugins

  Root logger:
    rewritten-stdout
    request-log

Do more log4j2 reading - especially around features used in the default log4j2.xml file.

Strategy
--------
Containers write to the console:

  <Console name="myappender" target="SYSTEM_OUT">
    <JSONLayout compact="true" eventEol="true" properties="true" stacktraceAsString="true"/>
  </Console>

Managed servers write to rolling file appenders:

  <RollingFile name="myappender" fileName="${env:IDSVR_HOME}/var/log/elastic.log" filePattern="${env:IDSVR_HOME}/var/log/datelasticadog.log.%i.gz">
    <Policies>
      <SizeBasedTriggeringPolicy size="10MB"/>
    </Policies>
    <JSONLayout compact="true" eventEol="true" properties="true" stacktraceAsString="true"/>
  </RollingFile>

Therefore I added these:

  <Console name="jsonlogs" target="SYSTEM_OUT">
    <JSONLayout compact="true" eventEol="true" properties="true" stacktraceAsString="true"/>
  </Console>

  <AsyncRoot level="INFO">
    <AppenderRef ref="rewritten-stdout"/>
    <AppenderRef ref="request-log"/>
    <AppenderRef ref="metrics"/>
    <AppenderRef ref="jsonlogs"/>
  </AsyncRoot>

The stdout logs then look like this:

{
	"instant": {
		"epochSecond": 1636388141,
		"nanoOfSecond": 969043000
	},
	"thread": "req-110",
	"level": "WARN",
	"loggerName": "se.curity.identityserver.controllers.cat.UnsafeCatManager",
	"message": "Issuing unsafe web CAT because client configuration is set to skip attestation validation!",
	"endOfBatch": true,
	"loggerFqcn": "org.apache.logging.slf4j.Log4jLogger",
	"contextMap": {
		"LongSessionId": "236db06b-299d-4cb6-9989-b7b7cae15d42",
		"RequestId": "QwpikU9Z",
		"SessionId": "236db06b"
	},
	"threadId": 12,
	"threadPriority": 5
}

Initial Aggregation
-------------------
- Get filebeat deployed
- Get it shipping some initial data from the virtual machine

File Handling
-------------
Each Filebeat Daemonset instance is meant to pick up files from the virtual machine volume.
So Curity logs could be written there via use of volumes?