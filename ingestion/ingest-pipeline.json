PUT /_ingest/pipeline/curity
{
  "description": "Curity Logs Ingest Pipeline",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "description": "Transform incoming data",
        "source": "
def fields = ctx['fields'];
if (fields != null) {

  String logtype = fields['logtype'];
  if (logtype == 'system') {

    String message = ctx['message'];
    Map system = [:];

    int start = message.indexOf('[');
    int end   = message.indexOf(']');
    if (start >= 0 && end >= 0 && end > start) {

      system['type'] = message.substring(0, start);
     
      String messageFieldText = message.substring(start + 1, end);
      String[] fieldPairs = messageFieldText.splitOnToken(',');

      for (int i = 0; i < fieldPairs.length; i++) {

        String[] parts = fieldPairs[i].splitOnToken('=');
        if (parts.length == 2) {

          String key = parts[0];
          String value = parts[1];
          if (key.length() >= 1) {
            key = key.substring(1, key.length());
          }

          if (key == 'httpStatus') {
            system[key] = Integer.parseInt(value);
          } else {
            system[key] = value;
          }
        }
      }

      ctx['system'] = system;
      ctx.remove('message');
    }
  }
  
  if (logtype == 'request') {

    String message = ctx['message'];
    String[] fieldPairs = message.splitOnToken(' ');

    Map request = [:];
    for (int i = 0; i < fieldPairs.length; i++) {

      String[] parts = fieldPairs[i].splitOnToken('=');
      if (parts.length == 2) {
        
        String key = parts[0];
        String value = parts[1];
        if (value.length() >= 2) {
          value = value.substring(1, value.length() - 1);
        }

        if (key == 'duration' || key == 'size' || key == 'status') {
          request[key] = Integer.parseInt(value);
        } else {
          request[key] = value;
        }
      }
    }

    ctx['request'] = request;
    ctx.remove('message');
  }

  if (logtype == 'audit') {

    String message = ctx['message'];

    Map audit = [:];
    audit['type'] = message.splitOnToken(' ')[0];

    int start = message.indexOf('[');
    int end   = message.indexOf(']');
    if (start >= 0 && end >= 0 && end > start) {
      
      String messageFieldText = message.substring(start + 1, end);
      String[] fieldPairs = messageFieldText.splitOnToken(' ');

      audit['id'] = fieldPairs[0];
      for (int i = 1; i < fieldPairs.length; i++) {

        String[] parts = fieldPairs[i].splitOnToken('=');
        if (parts.length == 2) {

          String key = parts[0];  
          String value = parts[1];
          if (value.length() >= 2) {
            value = value.substring(1, value.length() - 1);
          }
          audit[key] = value;
        }
      }
    }

    ctx['audit'] = audit;
    ctx.remove('message');
  }
}"
      },
      "remove": {
        "field": ["endOfBatch", "instant", "log", "marker", "stream", "fields"],
        "ignore_missing": true
      }
    }
  ]
}
